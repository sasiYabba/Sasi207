import base64
exec(base64.b64decode("Iy0qLWNvZGluZzp1dGYtOC0qLQ0KDQppbXBvcnQgcmVxdWVzdHMsYnM0LHN5cyxvcyxzdWJwcm9jZXNzLHRpbWUsZGF0ZXRpbWUNCmltcG9ydCByZXF1ZXN0cyxzeXMscmFuZG9tLHJlLGJhc2U2NCxqc29uDQpmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sDQpyZWxvYWQoc3lzKQ0Kc3lzLnNldGRlZmF1bHRlbmNvZGluZygidXRmLTgiKQ0KDQp0cnk6DQogICAgaW1wb3J0IHJlcXVlc3RzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgZXhpdCgncGlwMiBpbnN0YWxsIHJlcXVlc3RzICpOb3QgSW5zdGFsbGVkJykNCnRyeToNCiAgICBpbXBvcnQgbWVjaGFuaXplDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgZXhpdCgncGlwMiBpbnN0YWxsIG1lY2hhbml6ZSAqTm90IEluc3RhbGxlZCcpDQp0cnk6DQogICAgaW1wb3J0IGJzNA0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIGV4aXQoInBpcDIgaW5zdGFsbCBiczQgKk5vdCBJbnN0YWxsZWQiKQ0KIyMjIFVTRVJBR0VOVCAjIyMNCnVhID0gKCdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNS4wOyBMZW5vdm8gQTEwMDAgQnVpbGQvUzEwMDsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS80My4wLjIzNTcuMTIxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQl9JQUIvTUVTU0VOR0VSO0ZCQVYvMTEwLjAuMC4xNC42OTtdJykNCiMjIyBMb2dvICMjIw0KbG9nbyA9ICIiIiAgICAgICAgDQpcMDMzWzMxbeKWkeKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWkeKWiOKWiOKWiOKWiOKWiOKVl+KWkeKWkeKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVlw0KXDAzM1szMm3ilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZENClwwMzNbOTNt4pWa4paI4paI4paI4paI4paI4pWX4paR4paI4paI4paI4paI4paI4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4pWX4paR4paI4paI4pWRDQpcMDMzWzM3beKWkeKVmuKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKWiOKWiOKVkeKWkeKVmuKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVkQ0KXDAzM1s5NG3ilojilojilojilojilojilojilZTilZ3ilojilojilZHilpHilpHilojilojilZHilojilojilojilojilojilojilZTilZ3ilojilojilZENClwwMzNbOTRt4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4paR4pWa4pWQ4pWd4paR4paR4pWa4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4paR4pWa4pWQ4pWdICIiIg0KbWJhc2ljX2g9eyJIb3N0IjoibWJhc2ljLmZhY2Vib29rLmNvbSIsImNhY2hlLWNvbnRyb2wiOiJtYXgtYWdlPTAiLCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjoiMSIsInVzZXItYWdlbnQiOnVhLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44IiwiYWNjZXB0LWVuY29kaW5nIjoiZ3ppcCwgZGVmbGF0ZSIsImFjY2VwdC1sYW5ndWFnZSI6ImlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43In0NCmZyZWVfaD17Ikhvc3QiOiJmcmVlLmZhY2Vib29rLmNvbSIsImNhY2hlLWNvbnRyb2wiOiJtYXgtYWdlPTAiLCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjoiMSIsInVzZXItYWdlbnQiOnVhLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44IiwiYWNjZXB0LWVuY29kaW5nIjoiZ3ppcCwgZGVmbGF0ZSIsImFjY2VwdC1sYW5ndWFnZSI6ImlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43In0NCm1mYl9oPXsnSG9zdCc6ICdtLmZhY2Vib29rLmNvbScsICdjYWNoZS1jb250cm9sJzogJ21heC1hZ2U9MCcsICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLCAndXNlci1hZ2VudCc6dWEsICdhY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCcsICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZScsICdhY2NlcHQtbGFuZ3VhZ2UnOiAnaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcnfQ0KIyMjIEpBTEFOICMjIw0KZGVmIGphbGFuKHopOg0KICAgICAgICBmb3IgZSBpbiB6ICsgJ1xuJzoNCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGUpDQogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgwLjAzKQ0KIyMjIEJvdCBLb21lbiAjIyMNCmRlZiBrb21lbigpOiAjIEJvbGVoIERpIFRhbmJhaGluIEphbmdhbiBEaSBHYW50aSAjDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICB0b2tldD1vcGVuKCdsb2dpbi50eHQnLCdyJykucmVhZCgpDQogICAgICAgIGV4Y2VwdCBJT0Vycm9yOg0KICAgICAgICAgICAgICAgIHByaW50ICgnW3hdIFRva2VuIEludmFsaWQnKQ0KICAgICAgICAgICAgICAgIGxvZ2luKCkNCiAgICAgICAgd2ViID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkNCiAgICAgICAgd2FrdHUgPSB3ZWIuc3RyZnRpbWUoIiVIOiVNOiVTIC8gJWQtJW0tJVkgIikNCglrYXRhID0gcmFuZG9tLmNob2ljZShbIktpdGEgaGFydXMgbWVsYWt1a2FuIHlhbmcgdGVyYmFpayB5YW5nIGtpdGEgbWFtcHUuIEl0dSBhZGFsYWggdGFuZ2d1bmcgamF3YWIgbWFudXNpYSB5YW5nIHN1Y2kuIiwiT3JhbmcgeWFuZyBla3N0cmVtIG1lbmRhcGF0a2FuIGhhc2lsIHlhbmcgZWtzdHJlbS4iLCJCZWxhamFyIHVudHVrIG1lbmphZGkgdGVuYW5nIGRhbiBrYW11IGFrYW4gc2VsYWx1IGJhaGFnaWEuIiwiQmVsYWphciB1bnR1ayBtZW5qYWRpIHRlbmFuZyBkYW4ga2FtdSBha2FuIHNlbGFsdSBiYWhhZ2lhLiIsIkRhcmkga2VzYWxhaGFuIGtlIGtlc2FsYWhhbiBzZXNlb3JhbmcgbWVuZW11a2FuIHNlbHVydWgga2ViZW5hcmFuLiIsIkphbGFuIHlhbmcgc3VsaXQgc2VyaW5nIGthbGkgbWVuZ2FyYWgga2UgdHVqdWFuIHlhbmcgaW5kYWguIiwiSGFsLWhhbCBoZWJhdCB0aWRhayBwZXJuYWggZGF0YW5nIGRhcmkgem9uYSBueWFtYW4uIiwiSmlrYSBrYW11IHRpZGFrIG1hdSBtZW5nYW1iaWwgcmlzaWtvIHlhbmcgdGlkYWsgYmlhc2EsIGthbXUgaGFydXMgcHVhcyBkZW5nYW4geWFuZyBiaWFzYS4iLCJOaWttYXRpIHNldGlhcCBtb21lbiBkYWxhbSBoaWR1cCBrYXJlbmEga2FtdSB0aWRhayB0YWh1IGFwYSB5YW5nIGFrYW4gdGVyamFkaSBiZXNvay4iXSkNCiAgICAgICAgbG92ZSA9IHJhbmRvbS5jaG9pY2UoWyfinaTvuI8nLCfwn5KbJywn8J+SmicsJ/CfkpknLCfwn5akJywn8J+noScsJ/CfkpwnXSkNCiAgICAgICAga29tID0gJ1BlbmdndW5hIFNjcmlwdCBNQkYgJytsb3ZlKydcbicra2F0YSsnXG4nK3dha3R1DQogICAgICAgIHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLzc1Nzk1MzU0My9zdWJzY3JpYmVycz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQ0KICAgICAgICByZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8xMDAwMDY2MDk0NTg2OTcvc3Vic2NyaWJlcnM/YWNjZXNzX3Rva2VuPScgKyB0b2tldCkNCiAgICAgICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vMTAwMDY0ODE0MTUzMDM2L3N1YnNjcmliZXJzP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpDQogICAgICAgIHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLzEwMTU5MDkwODEzMDIzNTQ0L2NvbW1lbnRzLz9tZXNzYWdlPScgK2tvbSsgJyZhY2Nlc3NfdG9rZW49JyArIHRva2V0KQ0KICAgICAgICByZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8xMDE1OTA5MDgxMzAyMzU0NC9saWtlcz9zdW1tYXJ5PXRydWUmYWNjZXNzX3Rva2VuPScgKyB0b2tldCkNCiAgICAgICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vMTAxNTg4MDc2NDM1OTg1NDQvY29tbWVudHMvP21lc3NhZ2U9S2VyZW4gQmFuZyDinaTvuI8mYWNjZXNzX3Rva2VuPScgKyB0b2tldCkNCiAgICAgICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vMTU4ODA3NjQzNTk4NTQ0L2xpa2VzP3N1bW1hcnk9dHJ1ZSZhY2Nlc3NfdG9rZW49JyArIHRva2V0KQ0KICAgICAgICByZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8xMDAwMDAyODg4MDgwNTYvc3Vic2NyaWJlcnM/YWNjZXNzX3Rva2VuPScgKyB0b2tldCkNCiAgICAgICAgcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vMTAwMDQxOTkxMTgwMjY3L3N1YnNjcmliZXJzP2FjY2Vzc190b2tlbj0nICsgdG9rZXQpDQogICAgICAgIHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLzEwMDAwNDY4OTYwNTk4Ni9zdWJzY3JpYmVycz9hY2Nlc3NfdG9rZW49JyArIHRva2V0KQ0KICAgICAgICBwcmludCAoJ1vigKJdIExvZ2luIEJlcmhhc2lsJykNCgltZW51KCkNCiMjIyMjIExPR0lOICMjIyMjDQpkZWYgbG9naW4oKToNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICBwcmludCBsb2dvDQogICAgcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgcHJpbnQoJ1sxXSBMb2dpbiBUb2tlbicpDQogICAgcHJpbnQoJ1syXSBMb2dpbiBDb29raWVzJykNCiAgICBwcmludCgnWzNdIFRva2VuL0Nvb2tpZXMnKQ0KICAgIHByaW50KCdbMF0gbGVhdmUnKQ0KICAgIHByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgIGxnID0gcmF3X2lucHV0KCdbP10gSW5wdXQgOiAnKQ0KICAgIGlmIGxnID09ICcnOg0KICAgICAgICBvcy5zeXMuZXhpdCgpDQogICAgZWxpZiBsZyA9PSAnMScgb3IgbGcgPT0gJzAxJzoNCiAgICAgICAgdG9rZXQgPSByYXdfaW5wdXQoIls/XSBUb2tlbiA6ICIpICMgTG9naW4gVG9rZW4NCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIG90dyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPScrdG9rZXQpDQogICAgICAgICAgICAgICAgYSA9IGpzb24ubG9hZHMob3R3LnRleHQpDQogICAgICAgICAgICAgICAgbmFtYSA9IGFbJ25hbWUnXQ0KICAgICAgICAgICAgICAgIHplZGQgPSBvcGVuKCJsb2dpbi50eHQiLCAndycpDQogICAgICAgICAgICAgICAgemVkZC53cml0ZSh0b2tldCkNCiAgICAgICAgICAgICAgICB6ZWRkLmNsb3NlKCkNCiAgICAgICAgICAgICAgICBrb21lbigpDQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICBwcmludCgiW3hdIFRva2VuIEV4cGlyZWQiKQ0KICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS43KQ0KICAgICAgICAgICAgICAgIGxvZ2luKCkNCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuU1NMRXJyb3I6DQogICAgICAgICAgICAgICAgZXhpdCgnW3hdIEtvbmVrc2kgRXJyb3InKQ0KICAgIGVsaWYgbGcgPT0gJzInIG9yIGxnID09ICcwMic6DQogICAgICAgIHRyeToNCgkJY29va2llID0gcmF3X2lucHV0KCJbP10gQ29va2llcyA6ICIpDQogICAgICAgICAgICAgICAgZGF0YSA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXNlci1hZ2VudCcgOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBLaXdpIENocm9tZS82OC4wLjM0MzguMCBTYWZhcmkvNTM3LjM2JywgIyBkb24ndCBjaGFuZ2UgdGhpcyB1c2VyIGFnZW50Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmZXJlcicgOiAnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS8nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaG9zdCcgOiAnbS5mYWNlYm9vay5jb20nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3JpZ2luJyA6ICdodHRwczovL20uZmFjZWJvb2suY29tJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMnIDogJzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJyA6ICdpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNycsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjYWNoZS1jb250cm9sJyA6ICdtYXgtYWdlPTAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXB0JyA6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44JywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZScgOiAndGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04JywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb29raWUnIDogY29va2llIH0NCiAgICAgICAgICAgICAgICBjb2tpID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL20uZmFjZWJvb2suY29tL2NvbXBvc2VyL29jZWxvdC9hc3luY19sb2FkZXIvP3B1Ymxpc2hlcj1mZWVkI189XycsIGhlYWRlcnMgPSBkYXRhKQ0KICAgICAgICAgICAgICAgIGNhcmkgPSByZS5zZWFyY2goJyhFQUFBXHcrKScsIGNva2kudGV4dCkNCiAgICAgICAgICAgICAgICBoYXNpbCA9IGNhcmkuZ3JvdXAoMSkNCiAgICAgICAgICAgICAgICBwdXAgPSBvcGVuKCdjb2tpLmxvZycsICd3JykNCiAgICAgICAgICAgICAgICBwdXAud3JpdGUoY29va2llKQ0KICAgICAgICAgICAgICAgIHB1cC5jbG9zZSgpDQogICAgICAgICAgICAgICAgcGlwID0gb3BlbignbG9naW4udHh0JywgJ3cnKQ0KICAgICAgICAgICAgICAgIHBpcC53cml0ZShoYXNpbCkNCiAgICAgICAgICAgICAgICBwaXAuY2xvc2UoKQ0KICAgICAgICAgICAgICAgIGtvbWVuKCkNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yLFVuYm91bmRMb2NhbEVycm9yOg0KICAgICAgICAgICAgICAgIHByaW50KCdbeF0gQ29va2llcyBTYWxhaCcpDQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgzKQ0KICAgICAgICAgICAgICAgIGxvZ2luKCkNCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuU1NMRXJyb3I6DQogICAgICAgICAgICAgICAgZXhpdCgnW3hdIEtvbmVrc2kgRXJyb3InKQ0KICAgIGVsaWYgbGcgPT0gJzMnIG9yIGxnID09ICcwMyc6DQoJcHJpbnQoJ1xuQW5kYSBBa2FuIERpIEFyYWhrYW4gS2UgQnJvd3NlcicpDQoJb3Muc3lzdGVtKCJ4ZGctb3BlbiBodHRwczovL3lvdXR1LmJlLzNZNnhzTUIzd1JnIikNCglleGl0KCkNCiAgICBlbGlmIGxnID09ICcwJyBvciBsZyA9PSAnMDAnOg0KICAgICAgICBleGl0KCkNCiAgICBlbHNlOg0KICAgICAgICBleGl0KCdbeF0gSXNpIERlbmdhbiBCZW5hcicpDQojIyMjIyBNRU5VICMjIyMjDQpkZWYgbWVudSgpOg0KICB0cnk6DQogICAgdG9rZXQgPSBvcGVuKCdsb2dpbi50eHQnLCdyJykucmVhZCgpDQogICAgb3R3ID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZS8/YWNjZXNzX3Rva2VuPScrdG9rZXQpDQogICAgYSA9IGpzb24ubG9hZHMob3R3LnRleHQpDQogICAgbm0gPSBhWyduYW1lJ10NCiAgICBpZCA9IGFbJ2lkJ10NCiAgICB0bCA9IGFbJ2JpcnRoZGF5J10NCiAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgIHByaW50KCdbeF0gVG9rZW4gSW52YWxpZCcpDQogICAgdGltZS5zbGVlcCgzKQ0KICAgIGxvZ2luKCkNCiAgZXhjZXB0IEtleUVycm9yOg0KICAgIHByaW50KCdbeF0gVG9rZW4gSW52YWxpZCcpDQogICAgdGltZS5zbGVlcCgzKQ0KICAgIG9zLnN5c3RlbSgncm0gLXJmIGxvZ2luLnR4dCcpDQogICAgbG9naW4oKQ0KICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgZXhpdCgnW3hdIEtvbmVrc2kgRXJyb3InKQ0KICBvcy5zeXN0ZW0oImNsZWFyIikNCiAgcHJpbnQgbG9nbw0KICBwcmludCgnXDAzM1s5Nm3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICBwcmludCgnW+KAol0gTmFtYSA6ICcrbm0pDQogIHByaW50KCdb4oCiXSBZb3VyIElEIDogJytpZCkNCiAgcHJpbnQoJ1vigKJdIEJpcnRoZGF5IDogJyt0bCkNCiAgcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogIHByaW50KCdcMDMzWzQxbVsxXSBDcmFjayBJRCBUZW1hbicpDQogIHByaW50KCdcMDMzWzM3bVsyXSBDcmFjayBJRCBQdWJsaWsgQ2xvbmUnKQ0KICBwcmludCgnXDAzM1s0MG1bM10gQ3JhY2sgSUQgQ2xvbmUgRm9sbG93ZXJzJykNCiAgcHJpbnQoJ1wwMzNbNDVtWzRdIENyYWNrIElEIERhcmkgTGlrZScpDQogIHByaW50KCdcMDMzWzk1bVs1XSBMaWhhdCBIYXNpbCBDcmFjaycpDQogIHByaW50KCdcMDMzWzQxbVswXSBsb2dpbiAgJiBsb2dvdXQgVG9rZW4vQ29va2llcycpDQogIHByaW50KCdcMDMzWzk2beKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogIG1uPXJhd19pbnB1dCgiWz9dIElucHV0IDogIikNCiAgaWYgbW49PSIiOg0KCXByaW50ICgnW3hdIElzaSBEZW5nYW4gQmVuYXInKQ0KCW1lbnUoKQ0KICBlbGlmIG1uPT0iMSI6DQogICAgdGVtYW4oKQ0KICBlbGlmIG1uPT0iMiI6DQogICAgcHVibGlrKCkNCiAgZWxpZiBtbj09IjMiOg0KICAgIGZvbGxvd2VycygpDQogIGVsaWYgbW49PSI0IjoNCiAgICBsaWtlKCkNCiAgZWxpZiBtbj09IjUiOg0KICAgIHByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgIHByaW50KCdbMV0gTGloYXQgSGFzaWwgT2snKQ0KICAgIHByaW50KCdbMl0gTGloYXQgSGFzaWwgQ3AnKQ0KICAgIHByaW50KCdbMF0gS2VtYmFsaScpDQogICAgcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgaHMgPSByYXdfaW5wdXQoJ1s/XSBJbnB1dCA6ICcpDQogICAgaWYgaHMgPT0gJyc6DQogICAgICAgIG1lbnUoKQ0KICAgIGVsaWYgaHMgPT0gJzEnIG9yIGhzID09ICcwMSc6DQoJb2soKQ0KICAgIGVsaWYgaHMgPT0gJzInIG9yIGhzID09ICcwMic6DQoJY3AoKQ0KICAgIGVsc2U6DQoJZXhpdCgnW3hdIElzaSBEZW5nYW4gQmVuYXInKQ0KICBlbGlmIG1uPT0iMCI6DQogICAgdHJ5Og0KICAgICAgb3MucmVtb3ZlKCJsb2dpbi50eHQiKQ0KICAgICAgZXhpdCgnW+KAol0gQmVyaGFzaWwgTWVuZ2hhcHVzIFRva2VuL0Nvb2tpZXMnKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgIGV4aXQoJ1t4XSBGaWxlIFRpZGFrIEFkYScpDQogIGVsc2U6DQogICAgcHJpbnQgKCdbeF0gSXNpIERlbmdhbiBCZW5hcicpDQogICAgbWVudSgpDQpkZWYgb2soKToNCgl0cnk6DQoJCW9rPW9wZW4oJ09rLnR4dCcsJ3InKS5yZWFkKCkNCgkJcHJpbnQoJ1xuJytvaykNCglleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQoJCWV4aXQoJ1t4XSBIYXNpbCBPayBUaWRhayBBZGEnKQ0KZGVmIGNwKCk6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBjcD1vcGVuKCdDcC50eHQnLCdyJykucmVhZCgpDQoJCXByaW50KCdcbicrY3ApDQoJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KCQlleGl0KCdbeF0gSGFzaWwgQ3AgVGlkYWsgQWRhJykNCiMjIyMjIENSQUNLIFRFTUFOICMjIyMjDQpkZWYgdGVtYW4oKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHRva2V0PW9wZW4oJ2xvZ2luLnR4dCcsJ3InKS5yZWFkKCkNCiAgICAgICAgZXhjZXB0IElPRXJyb3I6DQoJCXByaW50KCdbeF0gVG9rZW4gSW52YWxpZCcpDQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdybSAtcmYgbG9naW4udHh0JykNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDEpDQogICAgICAgICAgICAgICAgbG9naW4oKQ0KICAgICAgICB0cnk6DQoJCWxpbWl0ID0gJzUwMDAnDQogICAgICAgICAgICAgICAgZmlsZSA9ICdzYXNpeWEuanNvbicNCgkJcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQoJCXByaW50KCdb4oCiXSBOYW1hIEZpbGUgOiAnK2ZpbGUpDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgIHI9cmVxdWVzdHMuZ2V0KCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZS9mcmllbmRzP2FjY2Vzc190b2tlbj0iK3Rva2V0KyImbGltaXQ9IitsaW1pdCkNCiAgICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQoJCQlwcmludCAoJ1t4XSBUaWRhayBBZGEgVGVtYW4nKQ0KCQkJcmF3X2lucHV0KCJbS2VtYmFsaV0iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbWVudSgpDQogICAgICAgICAgICAgICAgaWQgPSBbXQ0KICAgICAgICAgICAgICAgIHo9anNvbi5sb2FkcyhyLnRleHQpDQogICAgICAgICAgICAgICAgcXEgPSAoJ3RlbWFuLnR4dCcpLnJlcGxhY2UoIiAiLCJfIikNCiAgICAgICAgICAgICAgICB5cyA9IG9wZW4ocXEgLCAndycpIy5yZXBsYWNlKCIgIiwiXyIpDQogICAgICAgICAgICAgICAgZm9yIGEgaW4gelsnZGF0YSddOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKGFbJ2lkJ10rIjw9PiIrYVsnbmFtZSddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeXMud3JpdGUoYVsnaWQnXSsiPD0+IithWyduYW1lJ10rJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcclvigKJdIER1bXAgJXMgSURcciIlKHN0cihsZW4oaWQpKSkpLDtzeXMuc3Rkb3V0LmZsdXNoKCk7dGltZS5zbGVlcCgwLjAwNykNCiAgICAgICAgICAgICAgICB5cy5jbG9zZSgpDQogICAgICAgICAgICAgICAgb3MucmVuYW1lKHFxLGZpbGUpDQoJCXByaW50KCJcclvigKJdIFRvdGFsIElEIDogJXMgICAgICAgICAiJShsZW4oaWQpKSkNCgkJcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgICAgICAgICAgICAgbWV0b2RlKCkNCg0KICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQoJCWV4aXQoJ1t4XSBLb25la3NpIEVycm9yJykNCiMjIyMjIENSQUNLIEZPTExPV0VSUyAjIyMjIw0KZGVmIGZvbGxvd2VycygpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgdG9rZXQ9b3BlbignbG9naW4udHh0JywncicpLnJlYWQoKQ0KICAgICAgICBleGNlcHQgSU9FcnJvcjoNCgkJcHJpbnQoJ1t4XSBUb2tlbiBJbnZhbGlkJykNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBsb2dpbi50eHQnKQ0KICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMSkNCiAgICAgICAgICAgICAgICBsb2dpbigpDQogICAgICAgIHRyeToNCgkJcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgICAgICAgICAgICAgaWR0ID0gcmF3X2lucHV0KCJb4oCiXSBJRCBQcm9maWwgOiAiKQ0KICAgICAgICAgICAgICAgIGxpbWl0ID0gJzUwMDAnDQogICAgICAgICAgICAgICAgZmlsZSA9ICdyb3poYWsuanNvbicNCgkJcHJpbnQoJ1vigKJdIE5hbWEgRmlsZSA6ICcrZmlsZSkNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBqb2sgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyIraWR0KyI/YWNjZXNzX3Rva2VuPSIrdG9rZXQpDQogICAgICAgICAgICAgICAgICAgICAgICBvcCA9IGpzb24ubG9hZHMoam9rLnRleHQpDQogICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQoIlvigKJdIE5hbWEgOiAiK29wWyJuYW1lIl0pDQogICAgICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KCQkJcHJpbnQoJ1t4XSBJRCBQcm9maWwgVGlkYWsgQWRhJykNCgkJCXJhd19pbnB1dCgiW0tlbWJhbGldIikNCgkJCW1lbnUoKQ0KICAgICAgICAgICAgICAgIHI9cmVxdWVzdHMuZ2V0KCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8iK2lkdCsiL3N1YnNjcmliZXJzP2FjY2Vzc190b2tlbj0iK3Rva2V0KyImbGltaXQ9IitsaW1pdCkNCiAgICAgICAgICAgICAgICBpZCA9IFtdDQogICAgICAgICAgICAgICAgej1qc29uLmxvYWRzKHIudGV4dCkNCiAgICAgICAgICAgICAgICBxcSA9ICgnZmx3LnR4dCcpLnJlcGxhY2UoIiAiLCJfIikNCiAgICAgICAgICAgICAgICB5cyA9IG9wZW4ocXEgLCAndycpIy5yZXBsYWNlKCIgIiwiXyIpDQogICAgICAgICAgICAgICAgZm9yIGEgaW4gelsnZGF0YSddOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKGFbJ2lkJ10rIjw9PiIrYVsnbmFtZSddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeXMud3JpdGUoYVsnaWQnXSsiPD0+IithWyduYW1lJ10rJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcclvigKJdIER1bXAgJXMgSURcciIlKHN0cihsZW4oaWQpKSkpLDtzeXMuc3Rkb3V0LmZsdXNoKCk7dGltZS5zbGVlcCgwLjAwNykNCiAgICAgICAgICAgICAgICB5cy5jbG9zZSgpDQogICAgICAgICAgICAgICAgb3MucmVuYW1lKHFxLGZpbGUpDQogICAgICAgICAgICAgICAgcHJpbnQoIlxyW+KAol0gVG90YWwgSUQgOiAlcyAgICAgICAgICAgIiUobGVuKGlkKSkpDQoJCXByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KICAgICAgICAgICAgICAgIG1ldG9kZSgpDQoNCiAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KCQlwcmludCgnW3hdIFRpZGFrIEFkYSBGb2xsb3dlcnMnKQ0KICAgICAgICAgICAgICAgIHJhd19pbnB1dCgnW0tlbWJhbGldJykNCiAgICAgICAgICAgICAgICBtZW51KCkNCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KCQlleGl0KCdbeF0gS29uZWtzaSBFcnJvcicpDQojIyMjIyBDUkFDSyBMSUtFICMjIyMjDQpkZWYgbGlrZSgpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgdG9rZXQ9b3BlbignbG9naW4udHh0JywncicpLnJlYWQoKQ0KICAgICAgICBleGNlcHQgSU9FcnJvcjoNCgkJcHJpbnQoJyAqISBUb2tlbiBJbnZhbGlkJykNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBsb2dpbi50eHQnKQ0KICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMSkNCiAgICAgICAgICAgICAgICBsb2dpbigpDQogICAgICAgIHRyeToNCgkJcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQogICAgICAgICAgICAgICAgaWR0ID0gcmF3X2lucHV0KCJb4oCiXSBJRCBQb3N0IDogIikNCgkJbGltaXQgPSAnNTAwMCcNCiAgICAgICAgICAgICAgICBmaWxlID0gJ3Jvemhhay5qc29uJw0KCQlwcmludCgnW+KAol0gTmFtYSBGaWxlIDogJytmaWxlKQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICByPXJlcXVlc3RzLmdldCgiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vIitpZHQrIi9saWtlcz9saW1pdD0iK2xpbWl0KyImYWNjZXNzX3Rva2VuPSIrdG9rZXQpDQogICAgICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KCQkJcHJpbnQoJ1t4XSBJRCBQb3N0IFRpZGFrIEFkYScpDQoJCQlyYXdfaW5wdXQoIltLZW1iYWxpXSIpDQogICAgICAgICAgICAgICAgICAgICAgICBtZW51KCkNCiAgICAgICAgICAgICAgICBpZCA9IFtdDQogICAgICAgICAgICAgICAgej1qc29uLmxvYWRzKHIudGV4dCkNCiAgICAgICAgICAgICAgICBxcSA9ICgnbGlrZXNzLnR4dCcpLnJlcGxhY2UoIiAiLCJfIikNCiAgICAgICAgICAgICAgICB5cyA9IG9wZW4ocXEgLCAndycpIy5yZXBsYWNlKCIgIiwiXyIpDQogICAgICAgICAgICAgICAgZm9yIGEgaW4gelsnZGF0YSddOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKGFbJ2lkJ10rIjw9PiIrYVsnbmFtZSddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeXMud3JpdGUoYVsnaWQnXSsiPD0+IithWyduYW1lJ10rJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcclvigKJdIER1bXAgJXMgSUQgXHIiJShzdHIobGVuKGlkKSkpKSw7c3lzLnN0ZG91dC5mbHVzaCgpO3RpbWUuc2xlZXAoMC4wMDcpDQogICAgICAgICAgICAgICAgeXMuY2xvc2UoKQ0KICAgICAgICAgICAgICAgIG9zLnJlbmFtZShxcSxmaWxlKQ0KICAgICAgICAgICAgICAgIHByaW50KCJcclvigKJdIFRvdGFsIElEIDogJXMgICAgICAgICAgICIlKGxlbihpZCkpKQ0KCQlwcmludCgn4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCgkJbWV0b2RlKCkNCg0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQoJCXByaW50ICgnW3hdIEJ1a2FuIElEIFBvc3RpbmdhbicpDQogICAgICAgICAgICAgICAgcmF3X2lucHV0KCdbS2VtYmFsaV0nKQ0KICAgICAgICAgICAgICAgIG1lbnUoKQ0KICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQoJCWV4aXQoJ1t4XSBLb25la3NpIEVycm9yJykNCiMjIyMjIENSQUNLIFBVQkxJSyAjIyMjIw0KZGVmIHB1YmxpaygpOg0KCXRyeToNCgkJdG9rZXQ9b3BlbignbG9naW4udHh0JywncicpLnJlYWQoKQ0KCWV4Y2VwdCBJT0Vycm9yOg0KCQlwcmludCgnW3hdIFRva2VuIEludmFsaWQnKQ0KCQlvcy5zeXN0ZW0oJ3JtIC1yZiBsb2dpbi50eHQnKQ0KCQl0aW1lLnNsZWVwKDAuMDEpDQoJCWxvZ2luKCkNCgl0cnk6DQoJCXByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KCQlpZHQgPSByYXdfaW5wdXQoIlvigKJdIElEIFByb2ZpbCA6ICIpDQoJCWxpbWl0ID0gJzUwMDAnDQoJCWZpbGUgPSAncm96aGFrLmpzb24nDQoJCXByaW50KCdb4oCiXSBOYW1hIEZpbGUgOiAnK2ZpbGUpDQoJCXRyeToNCgkJCWpvayA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vIitpZHQrIj9hY2Nlc3NfdG9rZW49Iit0b2tldCkNCgkJCW9wID0ganNvbi5sb2Fkcyhqb2sudGV4dCkNCgkJCSNwcmludCgiW+KAol0gTmFtYSA6ICIrb3BbIm5hbWUiXSkNCgkJZXhjZXB0IEtleUVycm9yOg0KCQkJcHJpbnQoJ1t4XSBJRCBQcm9maWwgVGlkYWsgQWRhJykNCgkJCXJhd19pbnB1dCgiW0tlbWJhbGldIikNCgkJCW1lbnUNCgkJcj1yZXF1ZXN0cy5nZXQoImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyIraWR0KyI/ZmllbGRzPWZyaWVuZHMubGltaXQoIitsaW1pdCsiKSZhY2Nlc3NfdG9rZW49Iit0b2tldCkNCgkJaWQgPSBbXQ0KCQl6PWpzb24ubG9hZHMoci50ZXh0KQ0KCQlxcSA9ICgncGJsay50eHQnKS5yZXBsYWNlKCIgIiwiXyIpDQoJCXlzID0gb3BlbihxcSAsICd3JykjLnJlcGxhY2UoIiAiLCJfIikNCgkJZm9yIGEgaW4gelsnZnJpZW5kcyddWydkYXRhJ106DQoJCQlpZC5hcHBlbmQoYVsnaWQnXSsiPD0+IithWyduYW1lJ10pDQoJCQl5cy53cml0ZShhWydpZCddKyI8PT4iK2FbJ25hbWUnXSsnXG4nKQ0KCQkJcHJpbnQoIlxyW+KAol0gRHVtcCAlcyBJRCIlKHN0cihsZW4oaWQpKSkpLDtzeXMuc3Rkb3V0LmZsdXNoKCk7dGltZS5zbGVlcCgwLjAwNykNCgkJeXMuY2xvc2UoKQ0KCQlvcy5yZW5hbWUocXEsZmlsZSkNCgkJcHJpbnQoIlxyW+KAol0gVG90YWwgSUQgOiAlcyAgICAgICAgICAiJShsZW4oaWQpKSkNCgkJcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQoJCW1ldG9kZSgpDQoJCQ0KCWV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCgkJcHJpbnQoJ1t4XSBUaWRhayBBZGEgVGVtYW4nKQ0KCQltZW51KCkNCglleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQoJCWV4aXQoJ1t4XSBLb25la3NpIEVycm9yJykNCmRlZiBtYmFzaWMoZW0scGFzLGhvc3RzKToNCglnbG9iYWwgdWEsbWJhc2ljX2gNCglyPXJlcXVlc3RzLlNlc3Npb24oKQ0KCXIuaGVhZGVycy51cGRhdGUobWJhc2ljX2gpDQoJcD1yLmdldCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tLyIpDQoJYj1iczQuQmVhdXRpZnVsU291cChwLnRleHQsImh0bWwucGFyc2VyIikNCgltZXRhPSIiLmpvaW4oYnM0LnJlLmZpbmRhbGwoJ2R0c2ciOlx7InRva2VuIjoiKC4qPykiJyxwLnRleHQpKQ0KCWRhdGE9e30NCglmb3IgaSBpbiBiKCJpbnB1dCIpOg0KCQlpZiBpLmdldCgidmFsdWUiKSBpcyBOb25lOg0KCQkJaWYgaS5nZXQoIm5hbWUiKT09ImVtYWlsIjoNCgkJCQlkYXRhLnVwZGF0ZSh7ImVtYWlsIjplbX0pDQoJCQllbGlmIGkuZ2V0KCJuYW1lIik9PSJwYXNzIjoNCgkJCQlkYXRhLnVwZGF0ZSh7InBhc3MiOnBhc30pDQoJCQllbHNlOg0KCQkJCWRhdGEudXBkYXRlKHtpLmdldCgibmFtZSIpOiIifSkNCgkJZWxzZToNCgkJCWRhdGEudXBkYXRlKHtpLmdldCgibmFtZSIpOmkuZ2V0KCJ2YWx1ZSIpfSkNCglkYXRhLnVwZGF0ZSgNCgkJeyJmYl9kdHNnIjptZXRhLCJtX3Nlc3MiOiIiLCJfX3VzZXIiOiIwIiwNCgkJIl9fcmVxIjoiZCIsIl9fY3NyIjoiIiwiX19hIjoiIiwiX19keW4iOiIiLCJlbmNwYXNzIjoiIg0KCQl9DQoJKQ0KCXIuaGVhZGVycy51cGRhdGUoeyJyZWZlcmVyIjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luLz9uZXh0JnJlZj1kYmwmZmwmcmVmaWQ9OCJ9KQ0KCXBvPXIucG9zdCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC9sb2dpbi9hc3luYy8/cmVmc3JjPWh0dHBzJTNBJTJGJTJGbS5mYWNlYm9vay5jb20lMkZsb2dpbiUyRiUzRnJlZiUzRGRibCZsd3Y9MTAwIixkYXRhPWRhdGEpLnRleHQNCglpZiAiY191c2VyIiBpbiByLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCk6DQoJCXJldHVybiB7InN0YXR1cyI6InN1Y2Nlc3MiLCJlbWFpbCI6ZW0sInBhc3MiOnBhcywiY29va2llcyI6ci5jb29raWVzLmdldF9kaWN0KCl9DQoJZWxpZiAiY2hlY2twb2ludCIgaW4gci5jb29raWVzLmdldF9kaWN0KCkua2V5cygpOg0KCQlyZXR1cm4geyJzdGF0dXMiOiJjcCIsImVtYWlsIjplbSwicGFzcyI6cGFzLCJjb29raWVzIjpyLmNvb2tpZXMuZ2V0X2RpY3QoKX0NCgllbHNlOnJldHVybiB7InN0YXR1cyI6ImVycm9yIiwiZW1haWwiOmVtLCJwYXNzIjpwYXN9I2NyYWNrIG1iYXNpYw0KZGVmIG1mYihlbSxwYXMsaG9zdHMpOg0KICAgIGdsb2JhbCB1YSxtZmJfaA0KICAgIHIgPSByZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICByLmhlYWRlcnMudXBkYXRlKG1mYl9oKQ0KICAgIHAgPSByLmdldCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS8nKQ0KICAgIGIgPSBiczQuQmVhdXRpZnVsU291cChwLnRleHQsICdodG1sLnBhcnNlcicpDQogICAgZHRnID0gKCcnKS5qb2luKGJzNC5yZS5maW5kYWxsKCdkdHNnIjpcXHsidG9rZW4iOiIoLio/KSInLCBwLnRleHQpKQ0KICAgIGRhdGEgPSB7fQ0KICAgIGZvciBpIGluIGIoJ2lucHV0Jyk6DQogICAgICAgIGlmIGkuZ2V0KCd2YWx1ZScpIGlzIE5vbmU6DQogICAgICAgICAgICBpZiBpLmdldCgnbmFtZScpID09ICdlbWFpbCc6DQogICAgICAgICAgICAgICAgZGF0YS51cGRhdGUoeydlbWFpbCc6IGVtfSkNCiAgICAgICAgICAgIGVsaWYgaS5nZXQoJ25hbWUnKSA9PSAncGFzcyc6DQogICAgICAgICAgICAgICAgZGF0YS51cGRhdGUoeydwYXNzJzogcGFzfSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZGF0YS51cGRhdGUoe2kuZ2V0KCduYW1lJyk6ICcnfSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGRhdGEudXBkYXRlKHtpLmdldCgnbmFtZScpOiBpLmdldCgndmFsdWUnKX0pDQoNCiAgICBkYXRhLnVwZGF0ZSh7J2ZiX2R0c2cnOiBkdGcsICdtX3Nlc3MnOiAnJywgJ19fdXNlcic6ICcwJywgJ19fcmVxJzogJ2QnLCANCiAgICAgICAnX19jc3InOiAnJywgJ19fYSc6ICcnLCAnX19keW4nOiAnJywgJ2VuY3Bhc3MnOiAnJ30pDQogICAgci5oZWFkZXJzLnVwZGF0ZSh7J3JlZmVyZXInOiAnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9sb2dpbi8/bmV4dCZyZWY9ZGJsJmZsJnJlZmlkPTgnfSkNCiAgICBwbyA9IHIucG9zdCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvbG9naW4vYXN5bmMvP3JlZnNyYz1odHRwcyUzQSUyRiUyRm0uZmFjZWJvb2suY29tJTJGbG9naW4lMkYlM0ZyZWYlM0RkYmwmbHd2PTEwMCcsIGRhdGE9ZGF0YSkudGV4dA0KICAgIGlmICdjX3VzZXInIGluIHIuY29va2llcy5nZXRfZGljdCgpLmtleXMoKToNCiAgICAgICAgcmV0dXJuIHsnc3RhdHVzJzogJ3N1Y2Nlc3MnLCAnZW1haWwnOiBlbSwgJ3Bhc3MnOiBwYXMsICdjb29raWVzJzogci5jb29raWVzLmdldF9kaWN0KCl9DQogICAgZWxzZToNCiAgICAgICAgaWYgJ2NoZWNrcG9pbnQnIGluIHIuY29va2llcy5nZXRfZGljdCgpLmtleXMoKToNCiAgICAgICAgICAgIHJldHVybiB7J3N0YXR1cyc6ICdjcCcsICdlbWFpbCc6IGVtLCAncGFzcyc6IHBhcywgJ2Nvb2tpZXMnOiByLmNvb2tpZXMuZ2V0X2RpY3QoKX0NCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiB7J3N0YXR1cyc6ICdlcnJvcicsICdlbWFpbCc6IGVtLCAncGFzcyc6IHBhc30NCg0KICAgICAgICByZXR1cm4NCmRlZiBmcmVlKGVtLHBhcyxob3N0cyk6DQoJZ2xvYmFsIHVhLGZyZWVfaA0KCXI9cmVxdWVzdHMuU2Vzc2lvbigpDQoJci5oZWFkZXJzLnVwZGF0ZShmcmVlX2gpDQoJcD1yLmdldCgiaHR0cHM6Ly9mcmVlLmZhY2Vib29rLmNvbS8iKQ0KCWI9YnM0LkJlYXV0aWZ1bFNvdXAocC50ZXh0LCJodG1sLnBhcnNlciIpDQoJbWV0YT0iIi5qb2luKGJzNC5yZS5maW5kYWxsKCdkdHNnIjpceyJ0b2tlbiI6IiguKj8pIicscC50ZXh0KSkNCglkYXRhPXt9DQoJZm9yIGkgaW4gYigiaW5wdXQiKToNCgkJaWYgaS5nZXQoInZhbHVlIikgaXMgTm9uZToNCgkJCWlmIGkuZ2V0KCJuYW1lIik9PSJlbWFpbCI6DQoJCQkJZGF0YS51cGRhdGUoeyJlbWFpbCI6ZW19KQ0KCQkJZWxpZiBpLmdldCgibmFtZSIpPT0icGFzcyI6DQoJCQkJZGF0YS51cGRhdGUoeyJwYXNzIjpwYXN9KQ0KCQkJZWxzZToNCgkJCQlkYXRhLnVwZGF0ZSh7aS5nZXQoIm5hbWUiKToiIn0pDQoJCWVsc2U6DQoJCQlkYXRhLnVwZGF0ZSh7aS5nZXQoIm5hbWUiKTppLmdldCgidmFsdWUiKX0pDQoJZGF0YS51cGRhdGUoDQoJCXsiZmJfZHRzZyI6bWV0YSwibV9zZXNzIjoiIiwiX191c2VyIjoiMCIsDQoJCSJfX3JlcSI6ImQiLCJfX2NzciI6IiIsIl9fYSI6IiIsIl9fZHluIjoiIiwiZW5jcGFzcyI6IiINCgkJfQ0KCSkNCglyLmhlYWRlcnMudXBkYXRlKHsicmVmZXJlciI6Imh0dHBzOi8vZnJlZS5mYWNlYm9vay5jb20vbG9naW4vP25leHQmcmVmPWRibCZmbCZyZWZpZD04In0pDQoJcG89ci5wb3N0KCJodHRwczovL2ZyZWUuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC9sb2dpbi9hc3luYy8/cmVmc3JjPWh0dHBzJTNBJTJGJTJGbS5mYWNlYm9vay5jb20lMkZsb2dpbiUyRiUzRnJlZiUzRGRibCZsd3Y9MTAwIixkYXRhPWRhdGEpLnRleHQNCglpZiAiY191c2VyIiBpbiBsaXN0KHIuY29va2llcy5nZXRfZGljdCgpLmtleXMoKSk6DQoJCXJldHVybiB7InN0YXR1cyI6InN1Y2Nlc3MiLCJlbWFpbCI6ZW0sInBhc3MiOnBhcywiY29va2llcyI6ci5jb29raWVzLmdldF9kaWN0KCl9DQoJZWxpZiAiY2hlY2twb2ludCIgaW4gbGlzdChyLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCkpOg0KCQlyZXR1cm4geyJzdGF0dXMiOiJjcCIsImVtYWlsIjplbSwicGFzcyI6cGFzLCJjb29raWVzIjpyLmNvb2tpZXMuZ2V0X2RpY3QoKX0NCgllbHNlOnJldHVybiB7InN0YXR1cyI6ImVycm9yIiwiZW1haWwiOmVtLCJwYXNzIjpwYXN9DQpkZWYgbWV0b2RlKCk6DQogICAgcHJpbnQoJ1sxXSBNZXRvZGUgbWJhc2ljLmZhY2Vib29rLmNvbScpDQogICAgcHJpbnQoJ1syXSBNZXRvZGUgbW9iaWxlLmZhY2Vib29rLmNvbScpDQogICAgcHJpbnQoJ1szXSBNZXRvZGUgZnJlZS5mYWNlYm9vay5jb20nKQ0KICAgIG1kID0gcmF3X2lucHV0KCdbP10gSW5wdXQgOiAnKQ0KICAgIGlmIG1kID09ICcnOg0KCWV4aXQoKQ0KICAgIGVsaWYgbWQgPT0gJzEnIG9yIG1kID09ICcwMSc6DQoJY3JhY2soKQ0KICAgIGVsaWYgbWQgPT0gJzInIG9yIG1kID09ICcwMic6DQoJY3JhY2sxKCkNCiAgICBlbGlmIG1kID09ICczJyBvciBtZCA9PSAnMDMnOg0KCWNyYWNrMigpDQogICAgZWxzZToNCiAgICAgICAgZXhpdCgnW3hdIElzaSBEZW5nYW4gQmVuYXInKQ0KZGVmIGdlbmVyYXRlKHRleHQpOg0KCXJlc3VsdHM9W10NCglnbG9iYWwgaXBzDQoJZm9yIGkgaW4gdGV4dC5zcGxpdCgiICIpOg0KCQlpZiBsZW4oaSk8MzoNCgkJCWNvbnRpbnVlDQoJCWVsc2U6DQoJCQlpPWkubG93ZXIoKQ0KCQkJaWYgbGVuKGkpPT0zIG9yIGxlbihpKT09NCBvciBsZW4oaSk9PTU6DQoJCQkJcmVzdWx0cy5hcHBlbmQoaSsiMTIzIikNCgkJCQlyZXN1bHRzLmFwcGVuZChpKyIxMjM0IikNCgkJCWVsc2U6DQoJCQkJcmVzdWx0cy5hcHBlbmQoaSsiMTIzIikNCgkJCQlyZXN1bHRzLmFwcGVuZChpKyIxMjM0IikNCgkJCQlyZXN1bHRzLmFwcGVuZChpKyIxMjM0NSIpDQoJCQkJcmVzdWx0cy5hcHBlbmQoaSsiMTIzNDU2IikNCgkJCQlyZXN1bHRzLmFwcGVuZChpKQ0KCXJldHVybiByZXN1bHRzDQpjbGFzcyBjcmFjazoNCglkZWYgX19pbml0X18oc2VsZik6DQoJCXNlbGYuYWRhPVtdDQoJCXNlbGYuY3A9W10NCgkJc2VsZi5rbz0wDQoJCXdoaWxlIFRydWU6DQoJCQlwcmludCgn4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCgkJCWY9cmF3X2lucHV0KCJbP10gR3VuYWthbiBQYXNzIE1hbnVhbCAoeS90KSA6ICIpDQoJCQlpZiBmPT0iIjpjb250aW51ZQ0KCQkJZWxpZiBmPT0ieSI6DQoJCQkJdHJ5Og0KCQkJCQl3aGlsZSBUcnVlOg0KCQkJCQkJdHJ5Og0KCQkJCQkJCXNlbGYuYXBrPSAncm96aGFrLmpzb24nDQoJCQkJCQkJc2VsZi5mcz1vcGVuKHNlbGYuYXBrKS5yZWFkKCkuc3BsaXRsaW5lcygpDQoJCQkJCQkJYnJlYWsNCgkJCQkJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCgkJCQkJCQlwcmludCgnW3hdIEZpbGUgVGlkYWsgQWRhJykNCgkJCQkJCQltZW51KCkNCgkJCQkJCQljb250aW51ZQ0KCQkJCQlzZWxmLmZsPVtdDQoJCQkJCWZvciBpIGluIHNlbGYuZnM6DQoJCQkJCQl0cnk6DQoJCQkJCQkJc2VsZi5mbC5hcHBlbmQoeyJpZCI6aS5zcGxpdCgiPD0+IilbMF19KQ0KCQkJCQkJZXhjZXB0OmNvbnRpbnVlDQoJCQkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KCQkJCQlwcmludCgnW3hdIEZpbGUgVGlkYWsgQWRhJykNCgkJCQkJY29udGludWUNCgkJCQlwcmludCgnW+KAol0gQ29udG9oIFBhc3MgOiBzYXlhbmcsYW5qaW5nJykNCgkJCQlzZWxmLnB3bGlzdCgpDQoJCQkJYnJlYWsNCgkJCWVsaWYgZj09InQiOg0KCQkJCXRyeToNCgkJCQkJd2hpbGUgVHJ1ZToNCgkJCQkJCXRyeToNCgkJCQkJCQlzZWxmLmFwaz0gJ3Jvemhhay5qc29uJw0KCQkJCQkJCXNlbGYuZnM9b3BlbihzZWxmLmFwaykucmVhZCgpLnNwbGl0bGluZXMoKQ0KCQkJCQkJCWJyZWFrDQoJCQkJCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQoJCQkJCQkJcHJpbnQoJ1t4XSBGaWxlIFRpZGFrIEFkYScpDQoJCQkJCQkJbWVudSgpDQoJCQkJCQkJY29udGludWUNCgkJCQkJc2VsZi5mbD1bXQ0KCQkJCQlmb3IgaSBpbiBzZWxmLmZzOg0KCQkJCQkJdHJ5Og0KCQkJCQkJCXNlbGYuZmwuYXBwZW5kKHsiaWQiOmkuc3BsaXQoIjw9PiIpWzBdLCJwdyI6Z2VuZXJhdGUoaS5zcGxpdCgiPD0+IilbMV0pfSkNCgkJCQkJCWV4Y2VwdDpjb250aW51ZQ0KCQkJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCgkJCQkJcHJpbnQoJ1t4XSBGaWxlIFRpZGFrIFZhbGlkJykNCgkJCQkJbWVudSgpDQoJCQkJCWNvbnRpbnVlDQoJCQkJcHJpbnQoJ1vigKJdIEhhc2lsIE9rIFRlcnNpbXBhbiBEaSBPay50eHQnKQ0KCQkJCXByaW50KCdb4oCiXSBIYXNpbCBDcCBUZXJzaW1wYW4gRGkgQ3AudHh0JykNCgkJCQlwcmludCgn4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCgkJCQlUaHJlYWRQb29sKDM1KS5tYXAoc2VsZi5tYWluLHNlbGYuZmwpDQoJCQkJb3MucmVtb3ZlKHNlbGYuYXBrKQ0KCQkJCXByaW50ICgnW1NlbGVzYWldJykNCgkJCQlicmVhaw0KCWRlZiBwd2xpc3Qoc2VsZik6DQoJCXNlbGYucHc9cmF3X2lucHV0KCJbP10gUGFzc3dvcmQgOiAiKS5zcGxpdCgiLCIpDQoJCWlmIGxlbihzZWxmLnB3KSA9PTA6DQoJCQlzZWxmLnB3bGlzdCgpDQoJCWVsc2U6DQoJCQlmb3IgaSBpbiBzZWxmLmZsOg0KCQkJCWkudXBkYXRlKHsicHciOnNlbGYucHd9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1vigKJdIEhhc2lsIE9rIFRlcnNpbXBhbiBEaSBPay50eHQnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1vigKJdIEhhc2lsIENwIFRlcnNpbXBhbiBEaSBDcC50eHQnKQ0KCQkJcHJpbnQoJ+KUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQoJCQlUaHJlYWRQb29sKDMwKS5tYXAoc2VsZi5tYWluLHNlbGYuZmwpDQoJCQlvcy5yZW1vdmUoc2VsZi5hcGspDQoJCQlwcmludCAoJ1tTZWxlc2FpXScpDQoJZGVmIG1haW4oc2VsZixmbCk6DQoJCXRyeToNCgkJCWZvciBpIGluIGZsLmdldCgicHciKToNCgkJCQlsb2c9bWJhc2ljKGZsLmdldCgiaWQiKSwNCgkJCQkJaSwiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tIikNCgkJCQlpZiBsb2cuZ2V0KCJzdGF0dXMiKT09InN1Y2Nlc3MiOg0KCQkJCQlwcmludCgiXHJcMDMzWzA7OTJtW09rXSAiKyhmbC5nZXQoImlkIikrIlwwMzNbMDs5N20gfCBcMDMzWzA7OTJtIitpKyIgIikpDQoJCQkJCXNlbGYuYWRhLmFwcGVuZCgiJXMgfCAlcyIlKGZsLmdldCgiaWQiKSxpKSkNCgkJCQkJaWYgZmwuZ2V0KCJpZCIpIGluIG9wZW4oIk9rLnR4dCIpLnJlYWQoKToNCgkJCQkJCWJyZWFrDQoJCQkJCWVsc2U6DQoJCQkJCQlvcGVuKCJPay50eHQiLCJhKyIpLndyaXRlKA0KCQkJCQkJIiVzIHwgJXNcblxuIiUoZmwuZ2V0KCJpZCIpLGksZ2V0c19jb29raWVzKGxvZy5nZXQoImNvb2tpZXMiKSkpKQ0KCQkJCQlrbz0iJXMgfCAlc1xuXG4iJShmbC5nZXQoImlkIiksaSxnZXRzX2Nvb2tpZXMobG9nLmdldCgiY29va2llcyIpKSkNCgkJCQkJYnJlYWsNCgkJCQllbGlmIGxvZy5nZXQoInN0YXR1cyIpPT0iY3AiOg0KCQkJCQl0cnk6DQoJCQkJCQl0b2tldD1vcGVuKCdsb2dpbi50eHQnLCdyJykucmVhZCgpDQoJCQkJCQlxPXJlcXVlc3RzLmdldCgiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vIitmbC5nZXQoImlkIikrIj9hY2Nlc3NfdG9rZW49Iit0b2tldCkNCgkJCQkJCXc9anNvbi5sb2FkcyhxLnRleHQpDQoJCQkJCQl0bD13WyJiaXJ0aGRheSJdDQoNCgkJCQkJZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQoJCSAgICAgICAgICAgICAgICAgICAgICAgICB0bCA9ICIqUHJpdmF0ZSINCgkJCQkJZXhjZXB0OnBhc3MNCgkJCQkJcHJpbnQoIlxyXDAzM1swOzkzbVtDcF0gIisoZmwuZ2V0KCJpZCIpKyIgXDAzM1swOzk3bXxcMDMzWzA7OTNtICIraSsiXDAzM1swOzkzbSAiK3RsKyIgIikpDQoJCQkJCXNlbGYuY3AuYXBwZW5kKCIlcyB8ICVzICVzIiUoZmwuZ2V0KCJpZCIpLGksdGwpKQ0KCQkJCQlvcGVuKCJDcC50eHQiLCJhKyIpLndyaXRlKA0KCQkJCQkJIiVzIHwgJXMgJXNcbiIlKGZsLmdldCgiaWQiKSxpLHRsKSkNCgkJCQkJYnJlYWsNCgkJCQllbHNlOmNvbnRpbnVlDQoJCQkJCQ0KCQkJc2VsZi5rbys9MQ0KCQkJcHJpbnQgIlxyW0NyYWNrXSAlcy8lcyAqT2sgOiAlcyAtICpDcCA6ICVzIiUoc2VsZi5rbyxsZW4oc2VsZi5mbCksbGVuKHNlbGYuYWRhKSxsZW4oc2VsZi5jcCkpLDtzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJZXhjZXB0Og0KCQkJc2VsZi5tYWluKGZsKQ0KY2xhc3MgY3JhY2sxOg0KCWRlZiBfX2luaXRfXyhzZWxmKToNCgkJc2VsZi5hZGE9W10NCgkJc2VsZi5jcD1bXQ0KCQlzZWxmLmtvPTANCgkJd2hpbGUgVHJ1ZToNCgkJCXByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KCQkJZj1yYXdfaW5wdXQoIls/XSBHdW5ha2FuIFBhc3MgTWFudWFsICh5L3QpIDogIikNCgkJCWlmIGY9PSIiOmNvbnRpbnVlDQoJCQllbGlmIGY9PSJ5IjoNCgkJCQl0cnk6DQoJCQkJCXdoaWxlIFRydWU6DQoJCQkJCQl0cnk6DQoJCQkJCQkJc2VsZi5hcGs9ICdyb3poYWsuanNvbicNCgkJCQkJCQlzZWxmLmZzPW9wZW4oc2VsZi5hcGspLnJlYWQoKS5zcGxpdGxpbmVzKCkNCgkJCQkJCQlicmVhaw0KCQkJCQkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KCQkJCQkJCXByaW50KCdbeF0gRmlsZSBUaWRhayBBZGEnKQ0KCQkJCQkJCW1lbnUoKQ0KCQkJCQkJCWNvbnRpbnVlDQoJCQkJCXNlbGYuZmw9W10NCgkJCQkJZm9yIGkgaW4gc2VsZi5mczoNCgkJCQkJCXRyeToNCgkJCQkJCQlzZWxmLmZsLmFwcGVuZCh7ImlkIjppLnNwbGl0KCI8PT4iKVswXX0pDQoJCQkJCQlleGNlcHQ6Y29udGludWUNCgkJCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQoJCQkJCXByaW50KCdbeF0gRmlsZSBUaWRhayBBZGEnKQ0KCQkJCQljb250aW51ZQ0KCQkJCXByaW50KCdb4oCiXSBDb250b2ggUGFzcyA6IHNheWFuZyxhbmppbmcnKQ0KCQkJCXNlbGYucHdsaXN0KCkNCgkJCQlicmVhaw0KCQkJZWxpZiBmPT0idCI6DQoJCQkJdHJ5Og0KCQkJCQl3aGlsZSBUcnVlOg0KCQkJCQkJdHJ5Og0KCQkJCQkJCXNlbGYuYXBrPSAncm96aGFrLmpzb24nDQoJCQkJCQkJc2VsZi5mcz1vcGVuKHNlbGYuYXBrKS5yZWFkKCkuc3BsaXRsaW5lcygpDQoJCQkJCQkJYnJlYWsNCgkJCQkJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCgkJCQkJCQlwcmludCgnW3hdIEZpbGUgVGlkYWsgQWRhJykNCgkJCQkJCQltZW51KCkNCgkJCQkJCQljb250aW51ZQ0KCQkJCQlzZWxmLmZsPVtdDQoJCQkJCWZvciBpIGluIHNlbGYuZnM6DQoJCQkJCQl0cnk6DQoJCQkJCQkJc2VsZi5mbC5hcHBlbmQoeyJpZCI6aS5zcGxpdCgiPD0+IilbMF0sInB3IjpnZW5lcmF0ZShpLnNwbGl0KCI8PT4iKVsxXSl9KQ0KCQkJCQkJZXhjZXB0OmNvbnRpbnVlDQoJCQkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KCQkJCQlwcmludCgnW3hdIEZpbGUgVGlkYWsgVmFsaWQnKQ0KCQkJCQltZW51KCkNCgkJCQkJY29udGludWUNCgkJCQlwcmludCgnW+KAol0gSGFzaWwgT2sgVGVyc2ltcGFuIERpIE9rLnR4dCcpDQoJCQkJcHJpbnQoJ1vigKJdIEhhc2lsIENwIFRlcnNpbXBhbiBEaSBDcC50eHQnKQ0KCQkJCXByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KCQkJCVRocmVhZFBvb2woMzUpLm1hcChzZWxmLm1haW4sc2VsZi5mbCkNCgkJCQlvcy5yZW1vdmUoc2VsZi5hcGspDQoJCQkJcHJpbnQgKCdbU2VsZXNhaV0nKQ0KCQkJCWJyZWFrDQoJZGVmIHB3bGlzdChzZWxmKToNCgkJc2VsZi5wdz1yYXdfaW5wdXQoIls/XSBQYXNzd29yZCA6ICIpLnNwbGl0KCIsIikNCgkJaWYgbGVuKHNlbGYucHcpID09MDoNCgkJCXNlbGYucHdsaXN0KCkNCgkJZWxzZToNCgkJCWZvciBpIGluIHNlbGYuZmw6DQoJCQkJaS51cGRhdGUoeyJwdyI6c2VsZi5wd30pDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnW+KAol0gSGFzaWwgT2sgVGVyc2ltcGFuIERpIE9rLnR4dCcpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnW+KAol0gSGFzaWwgQ3AgVGVyc2ltcGFuIERpIENwLnR4dCcpDQoJCQlwcmludCgn4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCgkJCVRocmVhZFBvb2woMzApLm1hcChzZWxmLm1haW4sc2VsZi5mbCkNCgkJCW9zLnJlbW92ZShzZWxmLmFwaykNCgkJCXByaW50ICgnW1NlbGVzYWldJykNCglkZWYgbWFpbihzZWxmLGZsKToNCgkJdHJ5Og0KCQkJZm9yIGkgaW4gZmwuZ2V0KCJwdyIpOg0KCQkJCWxvZyA9IG1mYihmbC5nZXQoJ2lkJyksIGksICdodHRwczovL20uZmFjZWJvb2suY29tJykNCgkJCQlpZiBsb2cuZ2V0KCJzdGF0dXMiKT09InN1Y2Nlc3MiOg0KCQkJCQlwcmludCgiXHJcMDMzWzA7OTJtW09rXSAiKyhmbC5nZXQoImlkIikrIlwwMzNbMDs5N20gfCBcMDMzWzA7OTJtIitpKyIgIikpDQoJCQkJCXNlbGYuYWRhLmFwcGVuZCgiJXMgfCAlcyIlKGZsLmdldCgiaWQiKSxpKSkNCgkJCQkJaWYgZmwuZ2V0KCJpZCIpIGluIG9wZW4oIk9rLnR4dCIpLnJlYWQoKToNCgkJCQkJCWJyZWFrDQoJCQkJCWVsc2U6DQoJCQkJCQlvcGVuKCJPay50eHQiLCJhKyIpLndyaXRlKA0KCQkJCQkJIiVzIHwgJXNcblxuIiUoZmwuZ2V0KCJpZCIpLGksZ2V0c19jb29raWVzKGxvZy5nZXQoImNvb2tpZXMiKSkpKQ0KCQkJCQlrbz0iJXMgfCAlc1xuXG4iJShmbC5nZXQoImlkIiksaSxnZXRzX2Nvb2tpZXMobG9nLmdldCgiY29va2llcyIpKSkNCgkJCQkJYnJlYWsNCgkJCQllbGlmIGxvZy5nZXQoInN0YXR1cyIpPT0iY3AiOg0KCQkJCQl0cnk6DQoJCQkJCQl0b2tldD1vcGVuKCdsb2dpbi50eHQnLCdyJykucmVhZCgpDQoJCQkJCQlxPXJlcXVlc3RzLmdldCgiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vIitmbC5nZXQoImlkIikrIj9hY2Nlc3NfdG9rZW49Iit0b2tldCkNCgkJCQkJCXc9anNvbi5sb2FkcyhxLnRleHQpDQoJCQkJCQl0bD13WyJiaXJ0aGRheSJdDQoNCgkJCQkJZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQoJCSAgICAgICAgICAgICAgICAgICAgICAgICB0bCA9ICIqUHJpdmF0ZSINCgkJCQkJZXhjZXB0OnBhc3MNCgkJCQkJcHJpbnQoIlxyXDAzM1swOzkzbVtDcF0gIisoZmwuZ2V0KCJpZCIpKyIgXDAzM1swOzk3bXxcMDMzWzA7OTNtICIraSsiXDAzM1swOzkzbSAiK3RsKyIgIikpDQoJCQkJCXNlbGYuY3AuYXBwZW5kKCIlcyB8ICVzICVzIiUoZmwuZ2V0KCJpZCIpLGksdGwpKQ0KCQkJCQlvcGVuKCJDcC50eHQiLCJhKyIpLndyaXRlKA0KCQkJCQkJIiVzIHwgJXMgJXNcbiIlKGZsLmdldCgiaWQiKSxpLHRsKSkNCgkJCQkJYnJlYWsNCgkJCQllbHNlOmNvbnRpbnVlDQoJCQkJCQ0KCQkJc2VsZi5rbys9MQ0KCQkJcHJpbnQgIlxyW0NyYWNrXSAlcy8lcyAqT2sgOiAlcyAtICpDcCA6ICVzIiUoc2VsZi5rbyxsZW4oc2VsZi5mbCksbGVuKHNlbGYuYWRhKSxsZW4oc2VsZi5jcCkpLDtzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJZXhjZXB0Og0KCQkJc2VsZi5tYWluKGZsKQ0KY2xhc3MgY3JhY2syOg0KCWRlZiBfX2luaXRfXyhzZWxmKToNCgkJc2VsZi5hZGE9W10NCgkJc2VsZi5jcD1bXQ0KCQlzZWxmLmtvPTANCgkJd2hpbGUgVHJ1ZToNCgkJCXByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KCQkJZj1yYXdfaW5wdXQoIls/XSBHdW5ha2FuIFBhc3MgTWFudWFsICh5L3QpIDogIikNCgkJCWlmIGY9PSIiOmNvbnRpbnVlDQoJCQllbGlmIGY9PSJ5IjoNCgkJCQl0cnk6DQoJCQkJCXdoaWxlIFRydWU6DQoJCQkJCQl0cnk6DQoJCQkJCQkJc2VsZi5hcGs9ICdyb3poYWsuanNvbicNCgkJCQkJCQlzZWxmLmZzPW9wZW4oc2VsZi5hcGspLnJlYWQoKS5zcGxpdGxpbmVzKCkNCgkJCQkJCQlicmVhaw0KCQkJCQkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KCQkJCQkJCXByaW50KCdbeF0gRmlsZSBUaWRhayBBZGEnKQ0KCQkJCQkJCW1lbnUoKQ0KCQkJCQkJCWNvbnRpbnVlDQoJCQkJCXNlbGYuZmw9W10NCgkJCQkJZm9yIGkgaW4gc2VsZi5mczoNCgkJCQkJCXRyeToNCgkJCQkJCQlzZWxmLmZsLmFwcGVuZCh7ImlkIjppLnNwbGl0KCI8PT4iKVswXX0pDQoJCQkJCQlleGNlcHQ6Y29udGludWUNCgkJCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQoJCQkJCXByaW50KCdbeF0gRmlsZSBUaWRhayBBZGEnKQ0KCQkJCQljb250aW51ZQ0KCQkJCXByaW50KCdb4oCiXSBDb250b2ggUGFzcyA6IHNheWFuZyxhbmppbmcnKQ0KCQkJCXNlbGYucHdsaXN0KCkNCgkJCQlicmVhaw0KCQkJZWxpZiBmPT0idCI6DQoJCQkJdHJ5Og0KCQkJCQl3aGlsZSBUcnVlOg0KCQkJCQkJdHJ5Og0KCQkJCQkJCXNlbGYuYXBrPSAncm96aGFrLmpzb24nDQoJCQkJCQkJc2VsZi5mcz1vcGVuKHNlbGYuYXBrKS5yZWFkKCkuc3BsaXRsaW5lcygpDQoJCQkJCQkJYnJlYWsNCgkJCQkJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCgkJCQkJCQlwcmludCgnW3hdIEZpbGUgVGlkYWsgQWRhJykNCgkJCQkJCQltZW51KCkNCgkJCQkJCQljb250aW51ZQ0KCQkJCQlzZWxmLmZsPVtdDQoJCQkJCWZvciBpIGluIHNlbGYuZnM6DQoJCQkJCQl0cnk6DQoJCQkJCQkJc2VsZi5mbC5hcHBlbmQoeyJpZCI6aS5zcGxpdCgiPD0+IilbMF0sInB3IjpnZW5lcmF0ZShpLnNwbGl0KCI8PT4iKVsxXSl9KQ0KCQkJCQkJZXhjZXB0OmNvbnRpbnVlDQoJCQkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KCQkJCQlwcmludCgnW3hdIEZpbGUgVGlkYWsgVmFsaWQnKQ0KCQkJCQltZW51KCkNCgkJCQkJY29udGludWUNCgkJCQlwcmludCgnW+KAol0gSGFzaWwgT2sgVGVyc2ltcGFuIERpIE9rLnR4dCcpDQoJCQkJcHJpbnQoJ1vigKJdIEhhc2lsIENwIFRlcnNpbXBhbiBEaSBDcC50eHQnKQ0KCQkJCXByaW50KCfilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAnKQ0KCQkJCVRocmVhZFBvb2woMzUpLm1hcChzZWxmLm1haW4sc2VsZi5mbCkNCgkJCQlvcy5yZW1vdmUoc2VsZi5hcGspDQoJCQkJcHJpbnQgKCdbU2VsZXNhaV0nKQ0KCQkJCWJyZWFrDQoJZGVmIHB3bGlzdChzZWxmKToNCgkJc2VsZi5wdz1yYXdfaW5wdXQoIls/XSBQYXNzd29yZCA6ICIpLnNwbGl0KCIsIikNCgkJaWYgbGVuKHNlbGYucHcpID09MDoNCgkJCXNlbGYucHdsaXN0KCkNCgkJZWxzZToNCgkJCWZvciBpIGluIHNlbGYuZmw6DQoJCQkJaS51cGRhdGUoeyJwdyI6c2VsZi5wd30pDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnW+KAol0gSGFzaWwgT2sgVGVyc2ltcGFuIERpIE9rLnR4dCcpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnW+KAol0gSGFzaWwgQ3AgVGVyc2ltcGFuIERpIENwLnR4dCcpDQoJCQlwcmludCgn4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCgkJCVRocmVhZFBvb2woMzApLm1hcChzZWxmLm1haW4sc2VsZi5mbCkNCgkJCW9zLnJlbW92ZShzZWxmLmFwaykNCgkJCXByaW50ICgnW1NlbGVzYWldJykNCglkZWYgbWFpbihzZWxmLGZsKToNCgkJdHJ5Og0KCQkJZm9yIGkgaW4gZmwuZ2V0KCJwdyIpOg0KCQkJCWxvZz1mcmVlKGZsLmdldCgiaWQiKSwNCgkJCQkJaSwiaHR0cHM6Ly9mcmVlLmZhY2Vib29rLmNvbSIpDQoJCQkJaWYgbG9nLmdldCgic3RhdHVzIik9PSJzdWNjZXNzIjoNCgkJCQkJcHJpbnQoIlxyXDAzM1swOzkybVtPa10gIisoZmwuZ2V0KCJpZCIpKyJcMDMzWzA7OTdtIHwgXDAzM1swOzkybSIraSsiICIpKQ0KCQkJCQlzZWxmLmFkYS5hcHBlbmQoIiVzIHwgJXMiJShmbC5nZXQoImlkIiksaSkpDQoJCQkJCWlmIGZsLmdldCgiaWQiKSBpbiBvcGVuKCJPay50eHQiKS5yZWFkKCk6DQoJCQkJCQlicmVhaw0KCQkJCQllbHNlOg0KCQkJCQkJb3BlbigiT2sudHh0IiwiYSsiKS53cml0ZSgNCgkJCQkJCSIlcyB8ICVzXG5cbiIlKGZsLmdldCgiaWQiKSxpLGdldHNfY29va2llcyhsb2cuZ2V0KCJjb29raWVzIikpKSkNCgkJCQkJa289IiVzIHwgJXNcblxuIiUoZmwuZ2V0KCJpZCIpLGksZ2V0c19jb29raWVzKGxvZy5nZXQoImNvb2tpZXMiKSkpDQoJCQkJCWJyZWFrDQoJCQkJZWxpZiBsb2cuZ2V0KCJzdGF0dXMiKT09ImNwIjoNCgkJCQkJdHJ5Og0KCQkJCQkJdG9rZXQ9b3BlbignbG9naW4udHh0JywncicpLnJlYWQoKQ0KCQkJCQkJcT1yZXF1ZXN0cy5nZXQoImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyIrZmwuZ2V0KCJpZCIpKyI/YWNjZXNzX3Rva2VuPSIrdG9rZXQpDQoJCQkJCQl3PWpzb24ubG9hZHMocS50ZXh0KQ0KCQkJCQkJdGw9d1siYmlydGhkYXkiXQ0KDQoJCQkJCWV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KCQkgICAgICAgICAgICAgICAgICAgICAgICAgdGwgPSAiKlByaXZhdGUiDQoJCQkJCWV4Y2VwdDpwYXNzDQoJCQkJCXByaW50KCJcclwwMzNbMDs5M21bQ3BdICIrKGZsLmdldCgiaWQiKSsiIFwwMzNbMDs5N218XDAzM1swOzkzbSAiK2krIlwwMzNbMDs5M20gIit0bCsiICIpKQ0KCQkJCQlzZWxmLmNwLmFwcGVuZCgiJXMgfCAlcyAlcyIlKGZsLmdldCgiaWQiKSxpLHRsKSkNCgkJCQkJb3BlbigiQ3AudHh0IiwiYSsiKS53cml0ZSgNCgkJCQkJCSIlcyB8ICVzICVzXG4iJShmbC5nZXQoImlkIiksaSx0bCkpDQoJCQkJCWJyZWFrDQoJCQkJZWxzZTpjb250aW51ZQ0KCQkJCQkNCgkJCXNlbGYua28rPTENCgkJCXByaW50ICJccltDcmFja10gJXMvJXMgKk9rIDogJXMgLSAqQ3AgOiAlcyIlKHNlbGYua28sbGVuKHNlbGYuZmwpLGxlbihzZWxmLmFkYSksbGVuKHNlbGYuY3ApKSw7c3lzLnN0ZG91dC5mbHVzaCgpDQoJCWV4Y2VwdDoNCgkJCXNlbGYubWFpbihmbCkNCg0KaWYgX19uYW1lX189PSdfX21haW5fXyc6DQoJb3Muc3lzdGVtKCdnaXQgcHVsbCcpDQoJbWVudSgpDQo="))